flight %>%
select(Year, DepTime)
f1 = flight %>%
mutate(flight_time=ArrTime-DepTime)
as.data.frame(f1)
head(f1)
as.data.frame(head(f1))
flight %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay>60) %>%
arrange(desc(DepDelay))
length(Year)
#group_by, and summarise : dplyr
flights %>%
select(UniqueCarrier, DepDelay)
flight %>%
select(UniqueCarrier, DepDelay)
flight %>%
select(UniqueCarrier) %>%
group_by(UniqueCarrier) %>%
summarise(ave_delay=mean(DepDelay, rm.na=T))
flight %>%
select(UniqueCarrier, ArrDelay) %>%
group_by(UniqueCarrier) %>%
summarise(ave_delay=mean(ArrDelay, rm.na=T))
head(flight)
head(flight)
source("http://foxweb.marist.edu/users/duy.nguyen2/cdc.R")
cdc1 <- as.data.frame(cdc)
head(cdc1)
cdc1 <- tbl_df(cdc)
cdc1
attatch(cdc1)
attach(cdc1)
#Q1: group by gender and find the average height
cdc1 %>%
group_by(gender) %>%
summarise(ave_height=mean(height, na.rm=T))
#Q3: group by gender and find the average age
cdc1 %>%
group_by(gender) %>%
summarise(ave_age=mean(height, na.rm=T))
#Q4: group by genhlth and find the average weight
cdc1 %>%
group_by(genhlth) %>%
summarise(ave_weight=mean(weight))
#Q4: group by genhlth and find the average weight
cdc1 %>%
group_by(genhlth) %>%
summarise(ave_weight=mean(weight, na.rm=T))
#Q5: group by genhlth and find the average height
cdc1 %>%
group_by(genhlth) %>%
summarise(ave_health=mean(height, na.rm=T))
#Q5: group by genhlth and find the average height
cdc1 %>%
group_by(genhlth) %>%
summarise(ave_health=mean(height, na.rm=T))
#Q6: use 'mutate' to add bmi, group by genhlth, and find the average bmi
cdc1 %>%
group_by(genhlth) %>%
mutate(bmi=(weight/height^2)*703) %>%
summarise(ave_bmi=mean(bmi, na.rm=T))
#Q7 use 'mutate' to add bmi, group by genhlth,  find the average bmi, find the average age, and find the average height
cdc1 %>%
group_by(genhlth) %>%
mutate(bmi=(weight/height^2)*703) %>%
summarise(ave_bmi=mean(bmi, na.rm=T), ave_age=mean(age, na.rm = T), ave_height=mean(height, na.rm = T))
#summarise_each : dplyr
attach(flight)
flight %>%
group_by(UniqueCarrier) %>%
summarize_each(funs(mean), Cancelled, Diverted)
attach(cdc1)
cdc1 %>%
group_by(gender) %>%
cdc1 %>%
group_by(gender) %>%
summarise_each(funs = mean, weight, height)
cdc %>%
group_by(gender) %>%
summarise_each(funs = mean, weight, height)
cdc %>%
group_by(gender) %>%
summarise_each(funs(mean), weight, height)
cdc1 %>%
group_by(gender) %>%
summarise_each(funs(mean), weight, height)
cdc1 %>%
group_by(genhlth) %>%
summarise_each(funs(mean), bmi, height)
cdc %>%
group_by(genhlth) %>%
summarise_each(funs(mean), bmi, height)
head(cdc)
cdc1$bmi=(weight/height^2)*703
head(bmi)
attach(cdc1)
head(bmi)
cdc1 %>%
group_by(genhlth) %>%
summarise_each(funs(mean), bmi, height)
cdc1 %>%
group_by(gender) %>%
summarise(gen_count=n()) %>%
arrange(desc(gen_count))
cdc1 %>%
group_by(genhlth) %>%
summarise(genhlth_count=n()) %>%
arrange(desc(genhlth_count))
rm=(list=lm())
rm=(list=ls())
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
df <- data.frame(Year = c(2000, rep(NA, 11)),
Month = as.factor(1:12),
Quarter = c('Q1', rep(NA, 2),
'Q2', rep(NA, 2),
'Q3', rep(NA, 2),
'Q4',rep(NA, 2)),
Balance = c(10000,rep(NA, 2), 6000,
rep(NA, 3), 3000,
2000, rep(NA, 2), 1000),
Withdrawal = c(rep(NA, 3), 4000,
rep(NA, 3), 3000,
1000, rep(NA, 2), 1000))
df
write.csv(df, file = df.csv)
write.csv(df, file = "df.csv")
df=read.csv("df.csv", header=T)
df
df <- df %>%
fill(Year, Quater, Balance) %>%
replace_na(list(Withdrawal = 0))
df <- df %>%
fill(Year, Quarter, Balance) %>%
replace_na(list(Withdrawal = 0))
df
df=tbl_df(df)
df
df %>%
filter(Withdrawal > 0) %>%
select(Month, Balance)
table1
table2
table3
source("http://foxweb.marist.edu/users/duy.nguyen2/cdc.R")
cdc$male = cdc$gender=="m"
head(cdc)
subset(cdc, cdc$gender=="m")
male = subset(cdc, cdc$gender=="m")
head(male)
male
write_csv(male, file = "male.csv")
head(cdc$male)
write_csv(cdc$male, file = "male.csv")
?tbl_df
males = subset(cdc, cdc$gender=="m")
head(males)
write_csv(males, file = "male.csv")
m1 <- tbl_df(males)
write_csv(m1, file = "male.csv")
write_csv(males, file = "male.csv")
write_csv(males, file = "males.csv")
write.csv(males, file = "males.csv")
read_csv("males.csv")
df
for(i in 1:length(df$Withdrawal)){
if(df$Withdrawal[i]==NA) df$Withdrawal[i]=0
}
for(i in 1:length(df$Withdrawal)){
if(df$Withdrawal[i]=="NA") df$Withdrawal[i]=0
}
df
for(i in 1:length(df$Balance)){
if(df$Balance[i]=="NA")df$Balance[i]=0
}
for(i in 1:length(df$Balance)){
if(df$Balance[i]=="NA") df$Balance[i]=0
}
df <- data.frame(Year = c(2000, rep(NA, 11)),
Month = as.factor(1:12),
Quarter = c('Q1', rep(NA, 2),
'Q2', rep(NA, 2),
'Q3', rep(NA, 2),
'Q4',rep(NA, 2)),
Balance = c(10000,rep(NA, 2), 6000,
rep(NA, 3), 3000,
2000, rep(NA, 2), 1000),
Withdrawal = c(rep(NA, 3), 4000,
rep(NA, 3), 3000,
1000, rep(NA, 2), 1000))
for(i in 1:length(df$Balance)){
if(df$Balance[i]=="<NA>") df$Balance[i]=0
}
for(i in 1:length(df$Balance)){
if(df$Balance[i]==<NA>) df$Balance[i]=0
}
for(i in 1:length(df$Balance)){
if(df$Balance[i]==<NA>) df$Balance[i]=0
}
for(i in 1:length(df$Balance)){
if(is.na(df$Balance)) df$Balance[i]=0
}
df
for(i in 1:length(df$Balance)){
if(is.na(df$Balance[i])) df$Balance[i]=0
}
df
for(i in 1:length(df$Quarter)){
if(is.na(df$Quarter[i])) df$Quarter[i]=0
}
df
for(i in 1:length(df$Balance)){
if(df$Balance[i]=="<NA>") df$Balance[i]=0
}
df
for(i in 1:length(df$Balance)){
if(df$Balance[i]==<NA>) df$Balance[i]=0
}
rm(list=lm())
rm=(list=lm())
rm=list=lm()
df <- data.frame(Year = c(2000, rep(NA, 11)),
Month = as.factor(1:12),
Quarter = c('Q1', rep(NA, 2),
'Q2', rep(NA, 2),
'Q3', rep(NA, 2),
'Q4',rep(NA, 2)),
Balance = c(10000,rep(NA, 2), 6000,
rep(NA, 3), 3000,
2000, rep(NA, 2), 1000),
Withdrawal = c(rep(NA, 3), 4000,
rep(NA, 3), 3000,
1000, rep(NA, 2), 1000))
df
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
view(df)
View(df)
fix(df)
for(i in 1:nrow(df)){
if(is.na(df$Balance[i])==T) df$Balance[i]=0
}
df
for(i in 1:nrow(df)){
if(is.na(df$Year[i])==T) df$Year[i]=0
}
df
fix(df)
df3=df
df3 %>% filter((Withdrawl!=0))
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
df <- data.frame(Year = c(2000, rep(NA, 11)),
Month = as.factor(1:12),
Quarter = c('Q1', rep(NA, 2),
'Q2', rep(NA, 2),
'Q3', rep(NA, 2),
'Q4',rep(NA, 2)),
Balance = c(10000,rep(NA, 2), 6000,
rep(NA, 3), 3000,
2000, rep(NA, 2), 1000),
Withdrawal = c(rep(NA, 3), 4000,
rep(NA, 3), 3000,
1000, rep(NA, 2), 1000))
View(df)
fix(df)
df %>% fill(Year, Quarter, Balance) %>% replace_na(list(Withdrawal=0))
df=tbl_df(df)
df %>% filter(Balance, Withdrawal=0)
df %>% filter(Balance, Withdrawal==0)
df %>% filter(Withdrawal!=0) %>% select(Quarter, Balance)
df %>% fill(Year, Quarter, Balance) %>% replace_na(list(Withdrawal=0))
df1 <- df
df1
df2=tbl_df(df1)
df2
write.csv(df, file = "df.csv")
df=read.csv("df.csv",header=T)
df
View(df)
df <- df %>%
fill(Year, Quarter, Balance) %>%
replace_na(list(Withdrawal = 0))
df
df=tbl_df(df)
df
df %>%
filter(Withdrawal > 0) %>%
select(Month,Balance)
# Spread across two tibbles
table4a  # cases
table4a %>% gather('1999','2000',key="year", value = "cases")
table4b %>% gather('1995', '2000', key = "y", value = "c")
table4b %>% gather('1999', '2000', key = "y", value = "c")
table3
table3 %>% separate(rate, c("cases", "population"), sep = "/")
table3 %>% separate(rate, c("cases", "population"), convert = T)
table3 %>% separate(year, c("century","year"), sep=2)
table3 %>% separate(year, c("century","year"), sep=2, convert = T)
table3
table3 %>% separate(year, c("century","year"), sep=2, convert = T) %>% separate(rate, c("cases"), convert = T)
table3 %>% separate(year, c("century","year"), sep=2, convert = T) %>% separate(rate, c("cases", "total"), convert = T)
table5 %>% unite(new, century, year)
table5 %>% unite(new, century, year, sep="")
table3a %>% unite(rate, cases, population, sep="/")
table3a %>% unite(total, cases, population, sep="/")
table3 %>% unite(total, cases, population, sep="/")
table3 %>% unite(total, cases, total, sep="/")
table3a
table3
setwd("~/Documents/GitHub/DATA220")
dfW = read.csv("TB_burden_countries_2018-05-01.csv", header=T)
dfW
?dfW
scramble.hats = function(){
hats = c(rep(1,10),rep(2,10))
mixed.hats = sample(hats)
sum(hats == mixed.hats)
}
scramble.hats()
z <- c(replicate(1000,scramble.hats())) #vector of men who got their correct hat's back with 0 representing those who didn't and 2 representing those who did.
t <- table(z)
length(which(z==2))/1000 #provides the pergentage of those who recieved their correct hats back
z <- c(replicate(1000,scramble.hats()))
t <- table(z)
t <- as.data.frame(table(z))
total = 0
count = 0
sum(t[,"Freq"])
ztotal=length(t[,"z"])
index=which(t[,"z"]==10)
index
greater = c(index:ztotal)
greater
t[1,"z"]
for(i in index:ztotal){
total = total+t[i,"Freq"]
print(total)
print(t[i,"z"])
}
total/1000
scramble.hatsTen()
scramble.hatsTen = function(){
z <- c(replicate(1000,scramble.hats())) #vector of men who got their correct
#hat's back with 0 representing those who didn't and 2 representing those
#who did.
t <- table(z)
length(which(z==2))/1000 #provides the pergentage of those who recieved
#their correct hats back
z <- c(replicate(1000,scramble.hats()))
t <- table(z)
t <- as.data.frame(table(z))
total = 0
count = 0
sum(t[,"Freq"])
ztotal=length(t[,"z"])
index=which(t[,"z"]==10)
#index
greater = c(index:ztotal)
#greater
#t[1,"z"]
for(i in index:ztotal){
total = total+t[i,"Freq"]
print(total)
print(t[i,"z"])
}
total/1000
}
scramble.hatsTen()
scramble.hatsTen()
scramble.hatsTen = function(){
z <- c(replicate(1000,scramble.hats())) #vector of men who got their correct
#hat's back with 0 representing those who didn't and 2 representing those
#who did.
t <- table(z)
length(which(z==2))/1000 #provides the pergentage of those who recieved
#their correct hats back
z <- c(replicate(1000,scramble.hats()))
t <- table(z)
t <- as.data.frame(table(z))
total = 0
count = 0
sum(t[,"Freq"])
ztotal=length(t[,"z"])
index=which(t[,"z"]==10)
#index
greater = c(index:ztotal)
#greater
#t[1,"z"]
for(i in index:ztotal){
total = total+t[i,"Freq"]
#print(total)
#print(t[i,"z"])
}
total/1000
}
scramble.hatsTen()
67+20+21+21
scramble.hats = function(){
hats = c(rep(1,10),rep(2,10))
mixed.hats = sample(hats)
sum(hats == mixed.hats)
}
scramble.hats()
replicate(1000,scramble.hats())
matches <- replicate(1000,scramble.hats())
scramble.hatsTen = function(){
matches <- c(replicate(1000,scramble.hats()))           # z -> matches
#vector of men who got their correct
#hat's back with 0 representing those who didn't and 2 representing those
#who did.
tMatches <- table(matches)                              # t -> tMatches
length(which(matches==2))/1000 #provides the pergentage of those who
#recieved their correct hats back
# ----- Rm this ------
#z <- c(replicate(1000,scramble.hats()))
#t <- table(z)
#t <- as.data.frame(table(z))
dfMatches <- as.data.frame(table(z))                    # t -> dfMatches
total = 0
count = 0
sum(t[,"Freq"])
ztotal=length(t[,"z"])
index=which(t[,"z"]==10)
#index
greater = c(index:ztotal)
#greater
#t[1,"z"]
for(i in index:ztotal){
total = total+t[i,"Freq"]
#print(total)
#print(t[i,"z"])
}
total/1000
}
scramble.hatsTen()
matches <- replicate(1000,scramble.hats())
matches
dfMatches
scramble.hatsTen = function(){
matches <- c(replicate(1000,scramble.hats()))           # z -> matches
#vector of men who got their correct
#hat's back with 0 representing those who didn't and 2 representing those
#who did.
tMatches <- table(matches)                              # t -> tMatches
length(which(matches==2))/1000 #provides the pergentage of those who
#recieved their correct hats back
# ----- Rm this ------
#z <- c(replicate(1000,scramble.hats()))
#t <- table(z)
#t <- as.data.frame(table(z))
dfMatches <- as.data.frame(table(matches))              # t -> dfMatches
total = 0
count = 0
sum(dfMatches[,"Freq"])
ztotal=length(dfMatches[,"z"])
index=which(dfMatches[,"z"]==10)
#index
greater = c(index:ztotal)
#greater
#t[1,"z"]
for(i in index:ztotal){
total = total+dfMatches[i,"Freq"]
#print(total)
#print(t[i,"z"])
}
total/1000
}
scramble.hatsTen()
matches <- c(replicate(1000,scramble.hats()))           # z -> matches
matches
#vector of men who got their correct
#hat's back with 0 representing those who didn't and 2 representing those
#who did.
tMatches <- table(matches)                              # t -> tMatches
length(which(matches==2))/1000 #provides the pergentage of those who
length(which(matches==2))/1000 #provides the pergentage of those who
scramble.hatsTen = function(){
z <- c(replicate(1000,scramble.hats()))           # z -> matches
#vector of men who got their correct
#hat's back with 0 representing those who didn't and 2 representing those
#who did.
t <- table(z)                              # t -> tMatches
length(which(z==2))/1000 #provides the pergentage of those who
#recieved their correct hats back
# ----- Rm this ------
#z <- c(replicate(1000,scramble.hats()))
#t <- table(z)
#t <- as.data.frame(table(z))
t <- as.data.frame(table(z))              # t -> dfMatches
total = 0
count = 0
sum(t[,"Freq"])
ztotal=length(t[,"z"])
index=which(t[,"z"]==10)
#index
greater = c(index:ztotal)
#greater
#t[1,"z"]
for(i in index:ztotal){
total = total+t[i,"Freq"]
#print(total)
#print(t[i,"z"])
}
total/1000
}
scramble.hatsTen()
